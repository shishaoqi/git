#别名设置
git config --global alias.st status
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.br branch
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

#用户设置
$ git config --global user.name shishaoqi
$ git config --global user.email shishaoqi@huayun.com

#回退，先使用git log 查看 commit日志 或 git reflog，找到需要回退的那次commit的 哈希值，
git reset --hard commit_id

#回退上一次
git reset --hard HEAD^

#取消暂存
git reset HEAD <文件>

#取消本地增加的文件
git clean -df

#查看最近或某一次提交修改的文件列表相关命令整理
git log --name-status 每次修改的文件列表, 显示状态
git log --name-only 每次修改的文件列表
git log --stat 每次修改的文件列表, 及文件修改的统计
git log -p <filename>查看某个文件的修改历史
git log -p -2查看最近2次的更新内容
git whatchanged 每次修改的文件列表
git whatchanged --stat 每次修改的文件列表, 及文件修改的统计
git show 显示最后一次的文件改变的具体内容  
git show COMMIT
git show -5 显示最后 5 次的文件改变的具体内容
git show commitid 显示某个 commitid 改变的具体内容


#拉取远程分支
git checkout -b 本地分支名xxx origin/远程分支名xxx

#删除远程分支
git push origin --delete <branchName>

#删除不存在对应远程分支的本地分支
可以将(其)从本地版本库中去除
git remote prune origin
简单的方法是使用这个命令:
git fetch -p

#从版本控制中去除
git rm -r -n --cached "bin/" //-n：加上这个参数，执行命令时，是不会删除任何文件，而是展示此命令要删除的文件列表预览。
git rm -r --cached  "bin/"      //最终执行命令. 
git commit -m" remove bin folder all file out of control"    //提交
git push origin master   //提交到远程服务器


#git分支改名
如果对于分支不是当前分支，可以使用下面代码：
    git branch -m 原名 新

如果是当前，那么可以使用加上新名字
    git branch -m 原名

#重命名远程分支
在git中重命名远程分支，其实就是先删除远程分支，然后重命名本地分支，再重新提交一个远程分支。
git push --delete origin <remote branchName>
git branch -m <local branchName> <new local branchName>
git push origin <new local branchName>


#库初始
git init

#提交到远程库
git remote add origin git@github.com:shishaoqi/huobi-api.git
git remote add origin git@shishao.320.io:/usr/local/git-repository/huobi.git

#把本地分支提交到远程
git push --set-upstream origin local


#git库 忽略filemode变更
git config --add core.filemode false




#If the identity used for this commit is wrong, you can fix it with:
git commit --amend --author='Your Name <you@example.com>'

//http://ruby-china.org/topics/939
git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative

#怎样让 Git 忽略当前已经更改的文件
#忽略跟踪 与 恢复跟踪
$ git update-index --assume-unchanged /path/to/file       #忽略跟踪
$ git update-index --no-assume-unchanged /path/to/file  #恢复跟踪



//我忽略了
git update-index --assume-unchanged config/db_config.php
git update-index --assume-unchanged config/domain_config.php

#忽略跟踪vendor下composer部分文件跟踪
git update-index --assume-unchanged vendor/autoload.php
git update-index --assume-unchanged vendor/composer/ClassLoader.php
git update-index --assume-unchanged vendor/composer/autoload_files.php
git update-index --assume-unchanged vendor/composer/autoload_psr4.php
git update-index --assume-unchanged vendor/composer/autoload_real.php
git update-index --assume-unchanged vendor/composer/installed.json


#忽略跟踪composer.lock
git update-index --assume-unchanged composer.lock


本地永久忽略，效果的gitignore一样，只不过不适于写到gitignore中而已，可以自己建立一个本地独享的gitignore
$ git config --global core.excludesfile /path/to/file  
//#也可以直接将本地要忽略的文件添加到.git/info/exclude中
修改.git/info/exclude这个文件

